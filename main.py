import re
import logging
import pytesseract
import cv2
import numpy as np
from io import BytesIO
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
PASSPORT_PATTERN = re.compile(
    r'([A-Z0-9<]+)\s+([A-Z0-9<]+)\s+([A-Z0-9<]+)\s+([A-Z0-9<]+)\s+([A-Z]{3})\s+(\d{2}[A-Z]{3}\d{2})\s+([FM])\s+(\d{2}[A-Z]{3}\d{2})\s+([A-Z<]+)\s+([A-Z<]+)',
    re.IGNORECASE
)

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_markdown_v2(
        "üìÑ *–ü—Ä–∏–≤–µ—Ç\!* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *—Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –ø–∞—Å–ø–æ—Ä—Ç–∞*, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç AMADEUS\.\n\n"
        "–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —è –∏—â—É:\n"
        "```\n"
        "P<UZBFA0421711<1111111M1111111<<<<<<<<<<<<<<<0\n"
        "IBRAGIMOVA<<BARNO<BAKTIYAROVNA<<<<<<<<<<<<<<\n"
        "```\n\n"
        "–Ø –≤–µ—Ä–Ω—É —Ñ–æ—Ä–º–∞—Ç:\n"
        "`SR DOCS YY HK1-P-UZB-FA0421711-UZB-29NOV86-F-02JUL29-IBRAGIMOVA-BARNO BAKTIYAROVNA`"
    )

def extract_text_from_image(image_bytes):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR."""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ OpenCV-—Ñ–æ—Ä–º–∞—Ç (numpy array)
        image = Image.open(BytesIO(image_bytes))
        img_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
        
        # –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(thresh, config='--psm 6')
        return text.strip()
    except Exception as e:
        logger.error(f"OCR Error: {e}")
        return None

def process_passport_photo(update: Update, context: CallbackContext) -> None:
    if not update.message.photo:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    photo_file = update.message.photo[-1].get_file()
    image_bytes = BytesIO()
    photo_file.download(out=image_bytes)
    image_bytes.seek(0)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    extracted_text = extract_text_from_image(image_bytes.read())
    if not extracted_text:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ.")
        return
    
    logger.info(f"Extracted text: {extracted_text}")
    
    # –ò—â–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    match = PASSPORT_PATTERN.search(extracted_text)
    if not match:
        update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "```\n"
            "P<UZBFA0421711<1111111M1111111<<<<<<<<<<<<<<<0\n"
            "IBRAGIMOVA<<BARNO<BAKTIYAROVNA<<<<<<<<<<<<<<\n"
            "```"
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ AMADEUS
    try:
        doc_type = match.group(1)  # P
        country = match.group(2)   # UZB
        passport_number = match.group(3)  # FA0421711
        birth_date = match.group(6)  # 29NOV86
        gender = match.group(7)  # F/M
        expiry_date = match.group(8)  # 02JUL29
        last_name = match.group(9).replace('<', '')  # IBRAGIMOVA
        first_name = match.group(10).replace('<', ' ').strip()  # BARNO BAKTIYAROVNA
        
        amadeus_format = f"SR DOCS YY HK1-P-{country}-{passport_number}-{country}-{birth_date}-{gender}-{expiry_date}-{last_name}-{first_name}"
        
        update.message.reply_text(
            f"‚úÖ –§–æ—Ä–º–∞—Ç AMADEUS:\n\n`{amadeus_format}`\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç.",
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"Error parsing passport: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

def error_handler(update: Update, context: CallbackContext):
    logger.error("Exception:", exc_info=context.error)
    if update.message:
        update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    updater = Updater("7921805686:AAH0AJrCC0Dd6Lvb5mc3CXI9dUda_n89Y0Y", use_context=True)
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.photo, process_passport_photo))
    dispatcher.add_error_handler(error_handler)
    
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤...")
    updater.idle()

if __name__ == '__main__':
    main()
